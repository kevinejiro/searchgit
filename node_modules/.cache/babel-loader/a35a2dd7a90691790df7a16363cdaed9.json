{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nfunction useMedia(queries, values, defaultValue) {\n  _s();\n\n  // Array containing a media query list for each query\n  const mediaQueryLists = queries.map(q => window.matchMedia(q)); // Function that gets value based on matching media query\n\n  const getValue = () => {\n    // Get index of first media query that matches\n    const index = mediaQueryLists.findIndex(mql => mql.matches); // Return related value or defaultValue if none\n\n    return typeof values[index] !== \"undefined\" ? values[index] : defaultValue;\n  }; // State and setter for matched value\n\n\n  const [value, setValue] = useState(getValue);\n  useEffect(() => {\n    // Event listener callback\n    // Note: By defining getValue outside of useEffect we ensure that it has ...\n    // ... current values of hook args (as this hook callback is created once on mount).\n    const handler = () => setValue(getValue); // Set a listener for each media query with above handler as callback.\n\n\n    mediaQueryLists.forEach(mql => mql.addListener(handler)); // Remove listeners on cleanup\n\n    return () => mediaQueryLists.forEach(mql => mql.removeListener(handler));\n  }, // eslint-disable-next-line\n  [] // Empty array ensures effect is only run on mount and unmount\n  );\n  return value;\n}\n\n_s(useMedia, \"Rhr99LFzrwN+33aE+tLJ9L1r5sM=\");\n\nexport default useMedia;","map":{"version":3,"sources":["/Users/kevinogidigbo/searchgit/src/util/Hooks/useMedia.js"],"names":["useState","useEffect","useMedia","queries","values","defaultValue","mediaQueryLists","map","q","window","matchMedia","getValue","index","findIndex","mql","matches","value","setValue","handler","forEach","addListener","removeListener"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,YAAnC,EAAiD;AAAA;;AAChD;AACA,QAAMC,eAAe,GAAGH,OAAO,CAACI,GAAR,CAAaC,CAAD,IAAOC,MAAM,CAACC,UAAP,CAAkBF,CAAlB,CAAnB,CAAxB,CAFgD,CAIhD;;AACA,QAAMG,QAAQ,GAAG,MAAM;AACtB;AACA,UAAMC,KAAK,GAAGN,eAAe,CAACO,SAAhB,CAA2BC,GAAD,IAASA,GAAG,CAACC,OAAvC,CAAd,CAFsB,CAGtB;;AACA,WAAO,OAAOX,MAAM,CAACQ,KAAD,CAAb,KAAyB,WAAzB,GAAuCR,MAAM,CAACQ,KAAD,CAA7C,GAAuDP,YAA9D;AACA,GALD,CALgD,CAYhD;;;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACW,QAAD,CAAlC;AAEAV,EAAAA,SAAS,CACR,MAAM;AACL;AACA;AACA;AACA,UAAMiB,OAAO,GAAG,MAAMD,QAAQ,CAACN,QAAD,CAA9B,CAJK,CAKL;;;AACAL,IAAAA,eAAe,CAACa,OAAhB,CAAyBL,GAAD,IAASA,GAAG,CAACM,WAAJ,CAAgBF,OAAhB,CAAjC,EANK,CAOL;;AACA,WAAO,MACNZ,eAAe,CAACa,OAAhB,CAAyBL,GAAD,IAASA,GAAG,CAACO,cAAJ,CAAmBH,OAAnB,CAAjC,CADD;AAEA,GAXO,EAWL;AACH,IAZQ,CAYL;AAZK,GAAT;AAeA,SAAOF,KAAP;AACA;;GA/BQd,Q;;AAiCT,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useMedia(queries, values, defaultValue) {\n\t// Array containing a media query list for each query\n\tconst mediaQueryLists = queries.map((q) => window.matchMedia(q));\n\n\t// Function that gets value based on matching media query\n\tconst getValue = () => {\n\t\t// Get index of first media query that matches\n\t\tconst index = mediaQueryLists.findIndex((mql) => mql.matches);\n\t\t// Return related value or defaultValue if none\n\t\treturn typeof values[index] !== \"undefined\" ? values[index] : defaultValue;\n\t};\n\n\t// State and setter for matched value\n\tconst [value, setValue] = useState(getValue);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// Event listener callback\n\t\t\t// Note: By defining getValue outside of useEffect we ensure that it has ...\n\t\t\t// ... current values of hook args (as this hook callback is created once on mount).\n\t\t\tconst handler = () => setValue(getValue);\n\t\t\t// Set a listener for each media query with above handler as callback.\n\t\t\tmediaQueryLists.forEach((mql) => mql.addListener(handler));\n\t\t\t// Remove listeners on cleanup\n\t\t\treturn () =>\n\t\t\t\tmediaQueryLists.forEach((mql) => mql.removeListener(handler));\n\t\t}, // eslint-disable-next-line\n\t\t[] // Empty array ensures effect is only run on mount and unmount\n\t);\n\n\treturn value;\n}\n\nexport default useMedia;\n"]},"metadata":{},"sourceType":"module"}