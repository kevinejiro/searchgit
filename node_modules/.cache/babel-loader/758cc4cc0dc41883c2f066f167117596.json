{"ast":null,"code":"var _jsxFileName = \"/Users/kevinogidigbo/searchgit/src/store/context.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/React.createContext({\n  users: [],\n  errorMessage: \"\",\n  filterParam: \"\",\n  usersTotalCount: 0,\n  username: \"\",\n  isEmptyList: false,\n  isLoading: false,\n  setUsername: username => {},\n  setFilterParam: filterParam => {},\n  setPage: page => {},\n  page: 1,\n  pageCount: 0\n});\n\nfunction ContextProvider(props) {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [usersTotalCount, setUsersTotalCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [page, setPage] = useState(1);\n  const [filterParam, setFilterParam] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmptyList, setIsEmptyList] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n  useEffect(() => {\n    if (username !== \"\") {\n      getUsersHandler();\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [filterParam, page, username]);\n\n  const getUsersHandler = async () => {\n    setIsLoading(true); // eslint-disable-next-line\n\n    let response;\n\n    try {\n      var _response;\n\n      response = await axios.get(`https://api.github.com/search/users?q=${username} in:login type:${filterParam}&per_page=9&page=${page}&order=asc`);\n      const data = (_response = response) === null || _response === void 0 ? void 0 : _response.data;\n      setPageCount(Math.ceil((data === null || data === void 0 ? void 0 : data.total_count) / 9));\n      setUsers(data === null || data === void 0 ? void 0 : data.items);\n      setUsersTotalCount(data === null || data === void 0 ? void 0 : data.total_count);\n      setErrorMessage(\"\");\n\n      if ((data === null || data === void 0 ? void 0 : data.total_count) === 0) {\n        setIsEmptyList(true);\n      } else {\n        setIsEmptyList(false);\n      }\n    } catch (err) {\n      const error = err;\n      console.log(\"error\", error);\n\n      if (error === null || error === void 0 ? void 0 : error.response) {\n        var _error$response, _error$response2;\n\n        // Request made and server responded\n        setErrorMessage(`${error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status}  Something went wrong :( `);\n        console.log(\"Response Error\", error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status);\n      } else if (error === null || error === void 0 ? void 0 : error.request) {\n        // The request was made but no response was received\n        setErrorMessage(\"Unable to contact server\");\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        setErrorMessage(error === null || error === void 0 ? void 0 : error.message);\n        console.log(\"Message Error\", error.message);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      users,\n      errorMessage,\n      usersTotalCount,\n      username,\n      isLoading,\n      filterParam,\n      setUsername,\n      setFilterParam,\n      setPage,\n      isEmptyList,\n      page,\n      pageCount\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContextProvider, \"d3m8jD+JD0QELVPs0SQ98TaEC2U=\");\n\n_c = ContextProvider;\nexport { Context, ContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/Users/kevinogidigbo/searchgit/src/store/context.tsx"],"names":["React","useState","useEffect","axios","Context","createContext","users","errorMessage","filterParam","usersTotalCount","username","isEmptyList","isLoading","setUsername","setFilterParam","setPage","page","pageCount","ContextProvider","props","setUsers","setUsersTotalCount","setErrorMessage","setIsLoading","setIsEmptyList","setPageCount","getUsersHandler","response","get","data","Math","ceil","total_count","items","err","error","console","log","status","request","message","children"],"mappings":"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","sourcesContent":["import React, { ReactNode, useState, useEffect } from \"react\";\nimport axios, { AxiosError } from \"axios\";\n\ntype Props = {\n  children: ReactNode;\n};\n\nconst Context = React.createContext({\n  users: [],\n  errorMessage: \"\",\n  filterParam: \"\",\n  usersTotalCount: 0,\n  username: \"\",\n  isEmptyList: false,\n  isLoading: false,\n  setUsername: (username: string) => {},\n  setFilterParam: (filterParam: string) => {},\n  setPage: (page: number) => {},\n  page: 1,\n  pageCount: 0,\n});\n\nfunction ContextProvider(props: Props) {\n  const [users, setUsers] = useState([]);\n  const [usersTotalCount, setUsersTotalCount] = useState(0);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n\n  const [page, setPage] = useState(1);\n  const [filterParam, setFilterParam] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmptyList, setIsEmptyList] = useState(false);\n  const [pageCount, setPageCount] = useState(0);\n\n  useEffect(() => {\n    if (username !== \"\") {\n      getUsersHandler();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [filterParam, page, username]);\n\n  const getUsersHandler = async () => {\n    setIsLoading(true);\n    // eslint-disable-next-line\n    let response;\n    try {\n      response = await axios.get(\n        `https://api.github.com/search/users?q=${username} in:login type:${filterParam}&per_page=9&page=${page}&order=asc`\n      );\n\n      const data = response?.data;\n      setPageCount(Math.ceil(data?.total_count / 9));\n      setUsers(data?.items);\n      setUsersTotalCount(data?.total_count);\n      setErrorMessage(\"\");\n\n      if (data?.total_count === 0) {\n        setIsEmptyList(true);\n      } else {\n        setIsEmptyList(false);\n      }\n    } catch (err) {\n      const error = err as AxiosError;\n      console.log(\"error\", error);\n      if (error?.response) {\n        // Request made and server responded\n        setErrorMessage(`${error?.response?.status}  Something went wrong :( `);\n        console.log(\"Response Error\", error?.response?.status);\n      } else if (error?.request) {\n        // The request was made but no response was received\n        setErrorMessage(\"Unable to contact server\");\n      } else {\n        // Something happened in setting up the request that triggered an Error\n        setErrorMessage(error?.message);\n        console.log(\"Message Error\", error.message);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        users,\n        errorMessage,\n        usersTotalCount,\n        username,\n        isLoading,\n        filterParam,\n        setUsername,\n        setFilterParam,\n        setPage,\n        isEmptyList,\n        page,\n        pageCount,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n}\n\nexport { Context, ContextProvider };\n"]},"metadata":{},"sourceType":"module"}