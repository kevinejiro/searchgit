{"ast":null,"code":"import _slicedToArray from\"/Users/kevinogidigbo/searchgit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";function useMedia(queries,values,defaultValue){// Array containing a media query list for each query\nvar mediaQueryLists=queries.map(function(q){return window.matchMedia(q);});// Function that gets value based on matching media query\nvar getValue=function getValue(){// Get index of first media query that matches\nvar index=mediaQueryLists.findIndex(function(mql){return mql.matches;});// Return related value or defaultValue if none\nreturn typeof values[index]!==\"undefined\"?values[index]:defaultValue;};// State and setter for matched value\nvar _useState=useState(getValue),_useState2=_slicedToArray(_useState,2),value=_useState2[0],setValue=_useState2[1];useEffect(function(){// Event listener callback\n// Note: By defining getValue outside of useEffect we ensure that it has ...\n// ... current values of hook args (as this hook callback is created once on mount).\nvar handler=function handler(){return setValue(getValue);};// Set a listener for each media query with above handler as callback.\nmediaQueryLists.forEach(function(mql){return mql.addListener(handler);});// Remove listeners on cleanup\nreturn function(){return mediaQueryLists.forEach(function(mql){return mql.removeListener(handler);});};},// eslint-disable-next-line\n[]// Empty array ensures effect is only run on mount and unmount\n);return value;}export default useMedia;","map":{"version":3,"sources":["/Users/kevinogidigbo/searchgit/src/util/Hooks/useMedia.js"],"names":["useState","useEffect","useMedia","queries","values","defaultValue","mediaQueryLists","map","q","window","matchMedia","getValue","index","findIndex","mql","matches","value","setValue","handler","forEach","addListener","removeListener"],"mappings":"qJAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,QAASC,CAAAA,QAAT,CAAkBC,OAAlB,CAA2BC,MAA3B,CAAmCC,YAAnC,CAAiD,CAChD;AACA,GAAMC,CAAAA,eAAe,CAAGH,OAAO,CAACI,GAAR,CAAY,SAACC,CAAD,QAAOC,CAAAA,MAAM,CAACC,UAAP,CAAkBF,CAAlB,CAAP,EAAZ,CAAxB,CAEA;AACA,GAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACtB;AACA,GAAMC,CAAAA,KAAK,CAAGN,eAAe,CAACO,SAAhB,CAA0B,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,OAAb,EAA1B,CAAd,CACA;AACA,MAAO,OAAOX,CAAAA,MAAM,CAACQ,KAAD,CAAb,GAAyB,WAAzB,CAAuCR,MAAM,CAACQ,KAAD,CAA7C,CAAuDP,YAA9D,CACA,CALD,CAOA;AACA,cAA0BL,QAAQ,CAACW,QAAD,CAAlC,wCAAOK,KAAP,eAAcC,QAAd,eAEAhB,SAAS,CACR,UAAM,CACL;AACA;AACA;AACA,GAAMiB,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,SAAMD,CAAAA,QAAQ,CAACN,QAAD,CAAd,EAAhB,CACA;AACAL,eAAe,CAACa,OAAhB,CAAwB,SAACL,GAAD,QAASA,CAAAA,GAAG,CAACM,WAAJ,CAAgBF,OAAhB,CAAT,EAAxB,EACA;AACA,MAAO,kBACNZ,CAAAA,eAAe,CAACa,OAAhB,CAAwB,SAACL,GAAD,QAASA,CAAAA,GAAG,CAACO,cAAJ,CAAmBH,OAAnB,CAAT,EAAxB,CADM,EAAP,CAEA,CAXO,CAWL;AACH,EAAG;AAZK,CAAT,CAeA,MAAOF,CAAAA,KAAP,CACA,CAED,cAAed,CAAAA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useMedia(queries, values, defaultValue) {\n\t// Array containing a media query list for each query\n\tconst mediaQueryLists = queries.map((q) => window.matchMedia(q));\n\n\t// Function that gets value based on matching media query\n\tconst getValue = () => {\n\t\t// Get index of first media query that matches\n\t\tconst index = mediaQueryLists.findIndex((mql) => mql.matches);\n\t\t// Return related value or defaultValue if none\n\t\treturn typeof values[index] !== \"undefined\" ? values[index] : defaultValue;\n\t};\n\n\t// State and setter for matched value\n\tconst [value, setValue] = useState(getValue);\n\n\tuseEffect(\n\t\t() => {\n\t\t\t// Event listener callback\n\t\t\t// Note: By defining getValue outside of useEffect we ensure that it has ...\n\t\t\t// ... current values of hook args (as this hook callback is created once on mount).\n\t\t\tconst handler = () => setValue(getValue);\n\t\t\t// Set a listener for each media query with above handler as callback.\n\t\t\tmediaQueryLists.forEach((mql) => mql.addListener(handler));\n\t\t\t// Remove listeners on cleanup\n\t\t\treturn () =>\n\t\t\t\tmediaQueryLists.forEach((mql) => mql.removeListener(handler));\n\t\t}, // eslint-disable-next-line\n\t\t[] // Empty array ensures effect is only run on mount and unmount\n\t);\n\n\treturn value;\n}\n\nexport default useMedia;\n"]},"metadata":{},"sourceType":"module"}